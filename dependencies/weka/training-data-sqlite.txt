create unique index c_ck on customer (c_custkey asc) ;
create index c_nk on customer (c_nationkey asc) ;
create unique index p_pk on part (p_partkey asc) ;
create unique index s_sk on supplier (s_suppkey asc) ;
create index s_nk on supplier (s_nationkey asc) ;
create index ps_pk on partsupp (ps_partkey asc) ;
create index ps_sk on partsupp (ps_suppkey asc) ;
create unique index ps_pk_sk on partsupp (ps_partkey asc, ps_suppkey asc) ;
create unique index ps_sk_pk on partsupp (ps_suppkey asc, ps_partkey asc) ;
create unique index o_ok on orders (o_orderkey asc) ;
create index o_ck on orders (o_custkey asc) ;
create index o_od on orders (o_orderdate asc) ;
create index l_ok on lineitem (l_orderkey asc) ;
create index l_pk on lineitem (l_partkey asc) ;
create index l_sk on lineitem (l_suppkey asc) ;
--create index l_ln on lineitem (l_linenumber asc) ;
create index l_sd on lineitem (l_shipdate asc) ;
create index l_cd on lineitem (l_commitdate asc) ;
create index l_rd on lineitem (l_receiptdate asc) ;
--create unique index l_ok_ln on lineitem (l_orderkey asc, l_linenumber asc) ;
--create unique index l_ln_ok on lineitem (l_linenumber asc, l_orderkey asc) ;
create index l_pk_sk on lineitem (l_partkey asc, l_suppkey asc) ;
create index l_sk_pk on lineitem (l_suppkey asc, l_partkey asc) ;
create unique index n_nk on nation (n_nationkey asc) ;
create index n_rk on nation (n_regionkey asc) ;
create unique index r_rk on region (r_regionkey asc) ;
DROP TABLE IF EXISTS nation;
DROP TABLE IF EXISTS region;
DROP TABLE IF EXISTS part;
DROP TABLE IF EXISTS supplier;
DROP TABLE IF EXISTS partsupp;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customer;
DROP TABLE IF EXISTS lineitem;

CREATE TABLE nation  ( n_nationkey  INTEGER NOT NULL,
                       n_name       CHAR(25) NOT NULL,
                       n_regionkey  INTEGER NOT NULL,
                       n_comment    VARCHAR(152));

CREATE TABLE region  ( r_regionkey  INTEGER NOT NULL,
                       r_name       CHAR(25) NOT NULL,
                       r_comment    VARCHAR(152));

CREATE TABLE part  ( p_partkey     INTEGER NOT NULL,
                     p_name        VARCHAR(55) NOT NULL,
                     p_mfgr        CHAR(25) NOT NULL,
                     p_brand       CHAR(10) NOT NULL,
                     p_type        VARCHAR(25) NOT NULL,
                     p_size        INTEGER NOT NULL,
                     p_container   CHAR(10) NOT NULL,
                     p_retailprice DECIMAL(15,2) NOT NULL,
                     p_comment     VARCHAR(23) NOT NULL );

CREATE TABLE supplier ( s_suppkey     INTEGER NOT NULL,
                        s_name        CHAR(25) NOT NULL,
                        s_address     VARCHAR(40) NOT NULL,
                        s_nationkey   INTEGER NOT NULL,
                        s_phone       CHAR(15) NOT NULL,
                        s_acctbal     DECIMAL(15,2) NOT NULL,
                        s_comment     VARCHAR(101) NOT NULL);

CREATE TABLE partsupp ( ps_partkey     INTEGER NOT NULL,
                        ps_suppkey     INTEGER NOT NULL,
                        ps_availqty    INTEGER NOT NULL,
                        ps_supplycost  DECIMAL(15,2)  NOT NULL,
                        ps_comment     VARCHAR(199) NOT NULL );

CREATE TABLE customer ( c_custkey     INTEGER NOT NULL,
                        c_name        VARCHAR(25) NOT NULL,
                        c_address     VARCHAR(40) NOT NULL,
                        c_nationkey   INTEGER NOT NULL,
                        c_phone       CHAR(15) NOT NULL,
                        c_acctbal     DECIMAL(15,2)   NOT NULL,
                        c_mktsegment  CHAR(10) NOT NULL,
                        c_comment     VARCHAR(117) NOT NULL);

CREATE TABLE orders  ( o_orderkey       INTEGER NOT NULL,
                       o_custkey        INTEGER NOT NULL,
                       o_orderstatus    CHAR(1) NOT NULL,
                       o_totalprice     DECIMAL(15,2) NOT NULL,
                       o_orderdate      DATE NOT NULL,
                       o_orderpriority  CHAR(15) NOT NULL,  
                       o_clerk          CHAR(15) NOT NULL, 
                       o_shippriority   INTEGER NOT NULL,
                       o_comment        VARCHAR(79) NOT NULL);

CREATE TABLE lineitem ( l_orderkey    INTEGER NOT NULL,
                        l_partkey     INTEGER NOT NULL,
                        l_suppkey     INTEGER NOT NULL,
                        l_linenumber  INTEGER NOT NULL,
                        l_quantity    DECIMAL(15,2) NOT NULL,
                        l_extendedprice  DECIMAL(15,2) NOT NULL,
                        l_discount    DECIMAL(15,2) NOT NULL,
                        l_tax         DECIMAL(15,2) NOT NULL,
                        l_returnflag  CHAR(1) NOT NULL,
                        l_linestatus  CHAR(1) NOT NULL,
                        l_shipdate    DATE NOT NULL,
                        l_commitdate  DATE NOT NULL,
                        l_receiptdate DATE NOT NULL,
                        l_shipinstruct CHAR(25) NOT NULL,
                        l_shipmode     CHAR(10) NOT NULL,
                        l_comment      VARCHAR(44) NOT NULL);
                        drop procedure if exists drop_index_if_exists $$
create procedure drop_index_if_exists(in thetable varchar(128), in theindexname varchar(128) )
begin
 if((select count(*) as index_exists from information_schema.statistics where table_schema = database() and table_name =
thetable and index_name = theindexname) > 0) then
   set @s = concat('drop index ' , theindexname , ' on ' , thetable);
   prepare stmt from @s;
   execute stmt;
 end if;
end $$

delimiter ;


call drop_index_if_exists('facts', 'idx_facts_subject');
call drop_index_if_exists('facts', 'idx_facts_schema');
call drop_index_if_exists('facts', 'idx_facts_schema_pred');
call drop_index_if_exists('facts', 'idx_facts_pred');
call drop_index_if_exists('facts', 'idx_facts_obj');
call drop_index_if_exists('facts', 'idx_facts_tx');

create index idx_facts_subject on facts (subject(1000));
create index idx_facts_schema on facts(schema_name);
create index idx_facts_schema_pred on facts(schema_name, predicate);
create index idx_facts_pred on facts(predicate);
create index idx_facts_obj on facts(obj(8192));
create index idx_facts_tx on facts(tx);

call drop_index_if_exists('email', 'idx_email_id');
call drop_index_if_exists('email', 'idx_email_line_num');

create index idx_email_id on email(id);
create index idx_email_line_num on email(line_num);

call drop_index_if_exists('email_html', 'idx_email_html_id');

create index idx_email_html_id on email_html(id);

call drop_index_if_exists('entity', 'idx_entity_subject');
call drop_index_if_exists('entity', 'idx_entity_type');
call drop_index_if_exists('entity', 'idx_entity_val');

create index idx_entity_subject on entity(subject);
create index idx_entity_type on entity(entity_type);
create index idx_entity_val on entity(value);

call drop_index_if_exists('xref_recipients', 'idx_xref_recipients_from');
call drop_index_if_exists('xref_recipients', 'idx_xref_recipients_recipient');
call drop_index_if_exists('xref_recipients', 'idx_xref_recipients_email');

create index idx_xref_recipients_from on xref_recipients(`from`);
create index idx_xref_recipients_recipient on xref_recipients(recipient);
create index idx_xref_recipients_email on xref_recipients(email_id);

call drop_index_if_exists('xref_entity_email', 'idx_xref_entity_email_ids');
call drop_index_if_exists('xref_entity_email', 'idx_xref_entity_email_rollup');
call drop_index_if_exists('xref_entity_email', 'idx_xref_entity_email_email');

create index idx_xref_entity_email_ids on xref_entity_email(rollup_id, email_id);
create index idx_xref_entity_email_rollup on xref_entity_email(rollup_id);
create index idx_xref_entity_email_email on xref_entity_email(email_id);

call drop_index_if_exists('xref_emailaddr_email', 'idx_xref_emailaddr_email_addr_id');
call drop_index_if_exists('xref_emailaddr_email', 'idx_xref_emailaddr_email_addr');
call drop_index_if_exists('xref_emailaddr_email', 'idx_xref_emailaddr_email_id');

create index idx_xref_emailaddr_email_addr_id on xref_emailaddr_email(email_addr, email_id);
create index idx_xref_emailaddr_email_addr on xref_emailaddr_email(email_addr);
create index idx_xref_emailaddr_email_id on xref_emailaddr_email(email_id);

call drop_index_if_exists('xref_rollup_entity', 'idx_xref_emailaddr_email_addr_id');
call drop_index_if_exists('xref_rollup_entity', 'idx_xref_emailaddr_email_addr');
call drop_index_if_exists('xref_rollup_entity', 'idx_xref_emailaddr_email_id');

create index idx_xref_rollup_entity_rollup_entity on xref_rollup_entity(rollup_id, entity_id);
create index idx_xref_rollup_entity_rollup on xref_rollup_entity(rollup_id);
create index idx_xref_rollup_entity_entity on xref_rollup_entity(entity_id);


call drop_index_if_exists('topic_category', 'idx_topic_category_id');

create index idx_topic_category_id on topic_category(category_id);


call drop_index_if_exists('xref_email_topic_score', 'idx_xref_email_topic_score_email');
call drop_index_if_exists('xref_email_topic_score', 'idx_xref_email_topic_score_email_category');
call drop_index_if_exists('xref_email_topic_score', 'idx_xref_email_topic_score_category');

create index idx_xref_email_topic_score_email on xref_email_topic_score(email_id);
create index idx_xref_email_topic_score_email_category on xref_email_topic_score(category_id, email_id);
create index idx_xref_email_topic_score_category on xref_email_topic_score(category_id);

call drop_index_if_exists('xref_email_community', 'idx_xref_email_community_email_community');
call drop_index_if_exists('xref_email_community', 'idx_xref_email_community_email');
call drop_index_if_exists('xref_email_community', 'idx_xref_email_community_community');

create index idx_xref_email_community_email_community on xref_email_community(email_id, community_id);
create index idx_xref_email_community_email on xref_email_community(email_id);
create index idx_xref_email_community_community on xref_email_community(community_id);

call drop_index_if_exists('search_results', 'idx_search_results_email_id');
create index idx_search_results_email_id on search_results(email_id);


drop procedure if exists drop_index_if_exists;

CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  email VARCHAR(100) NOT NULL DEFAULT '' UNIQUE,
  password VARCHAR(255) DEFAULT NULL,
  salt VARCHAR(255) NOT NULL DEFAULT '',
  roles VARCHAR(255) NOT NULL DEFAULT '',
  name VARCHAR(100) NOT NULL DEFAULT '',
  time_created INT NOT NULL DEFAULT 0,
  username VARCHAR(100) UNIQUE,
  isEnabled INTEGER DEFAULT 1,
  confirmationToken VARCHAR(100),
  timePasswordResetRequested INT
);


CREATE TABLE user_custom_fields (
  user_id INT(11) NOT NULL,
  attribute VARCHAR(50) NOT NULL DEFAULT '',
  value VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (user_id, attribute)
);
DROP TABLE IF EXISTS datatables_demo;

CREATE TABLE datatables_demo (
	id         integer primary key,
	first_name text NOT NULL default '',
	last_name  text NOT NULL default '',
	position   text NOT NULL default '',
	email      text NOT NULL default '',
	office     text NOT NULL default '',
	start_date timestamp without time zone default NULL,
	age        integer,
	salary     integer,
	seq        integer,
	extn       text NOT NULL default ''
);

INSERT INTO datatables_demo
		( id, first_name, last_name, age, position, salary, start_date, extn, email, office, seq ) 
	VALUES
		( 1, 'Tiger', 'Nixon', 61, 'System Architect', 320800, '2011/04/25', 5421, 't.nixon@datatables.net', 'Edinburgh', 2 ),
		( 2, 'Garrett', 'Winters', 63, 'Accountant', 170750, '2011/07/25', 8422, 'g.winters@datatables.net', 'Tokyo', 22 ),
		( 3, 'Ashton', 'Cox', 66, 'Junior Technical Author', 86000, '2009/01/12', 1562, 'a.cox@datatables.net', 'San Francisco', 6 ),
		( 4, 'Cedric', 'Kelly', 22, 'Senior Javascript Developer', 433060, '2012/03/29', 6224, 'c.kelly@datatables.net', 'Edinburgh', 41 ),
		( 5, 'Airi', 'Satou', 33, 'Accountant', 162700, '2008/11/28', 5407, 'a.satou@datatables.net', 'Tokyo', 55 ),
		( 6, 'Brielle', 'Williamson', 61, 'Integration Specialist', 372000, '2012/12/02', 4804, 'b.williamson@datatables.net', 'New York', 21 ),
		( 7, 'Herrod', 'Chandler', 59, 'Sales Assistant', 137500, '2012/08/06', 9608, 'h.chandler@datatables.net', 'San Francisco', 46 ),
		( 8, 'Rhona', 'Davidson', 55, 'Integration Specialist', 327900, '2010/10/14', 6200, 'r.davidson@datatables.net', 'Tokyo', 50 ),
		( 9, 'Colleen', 'Hurst', 39, 'Javascript Developer', 205500, '2009/09/15', 2360, 'c.hurst@datatables.net', 'San Francisco', 26 ),
		( 10, 'Sonya', 'Frost', 23, 'Software Engineer', 103600, '2008/12/13', 1667, 's.frost@datatables.net', 'Edinburgh', 18 ),
		( 11, 'Jena', 'Gaines', 30, 'Office Manager', 90560, '2008/12/19', 3814, 'j.gaines@datatables.net', 'London', 13 ),
		( 12, 'Quinn', 'Flynn', 22, 'Support Lead', 342000, '2013/03/03', 9497, 'q.flynn@datatables.net', 'Edinburgh', 23 ),
		( 13, 'Charde', 'Marshall', 36, 'Regional Director', 470600, '2008/10/16', 6741, 'c.marshall@datatables.net', 'San Francisco', 14 ),
		( 14, 'Haley', 'Kennedy', 43, 'Senior Marketing Designer', 313500, '2012/12/18', 3597, 'h.kennedy@datatables.net', 'London', 12 ),
		( 15, 'Tatyana', 'Fitzpatrick', 19, 'Regional Director', 385750, '2010/03/17', 1965, 't.fitzpatrick@datatables.net', 'London', 54 ),
		( 16, 'Michael', 'Silva', 66, 'Marketing Designer', 198500, '2012/11/27', 1581, 'm.silva@datatables.net', 'London', 37 ),
		( 17, 'Paul', 'Byrd', 64, 'Chief Financial Officer (CFO)', 725000, '2010/06/09', 3059, 'p.byrd@datatables.net', 'New York', 32 ),
		( 18, 'Gloria', 'Little', 59, 'Systems Administrator', 237500, '2009/04/10', 1721, 'g.little@datatables.net', 'New York', 35 ),
		( 19, 'Bradley', 'Greer', 41, 'Software Engineer', 132000, '2012/10/13', 2558, 'b.greer@datatables.net', 'London', 48 ),
		( 20, 'Dai', 'Rios', 35, 'Personnel Lead', 217500, '2012/09/26', 2290, 'd.rios@datatables.net', 'Edinburgh', 45 ),
		( 21, 'Jenette', 'Caldwell', 30, 'Development Lead', 345000, '2011/09/03', 1937, 'j.caldwell@datatables.net', 'New York', 17 ),
		( 22, 'Yuri', 'Berry', 40, 'Chief Marketing Officer (CMO)', 675000, '2009/06/25', 6154, 'y.berry@datatables.net', 'New York', 57 ),
		( 23, 'Caesar', 'Vance', 21, 'Pre-Sales Support', 106450, '2011/12/12', 8330, 'c.vance@datatables.net', 'New York', 29 ),
		( 24, 'Doris', 'Wilder', 23, 'Sales Assistant', 85600, '2010/09/20', 3023, 'd.wilder@datatables.net', 'Sidney', 56 ),
		( 25, 'Angelica', 'Ramos', 47, 'Chief Executive Officer (CEO)', 1200000, '2009/10/09', 5797, 'a.ramos@datatables.net', 'London', 36 ),
		( 26, 'Gavin', 'Joyce', 42, 'Developer', 92575, '2010/12/22', 8822, 'g.joyce@datatables.net', 'Edinburgh', 5 ),
		( 27, 'Jennifer', 'Chang', 28, 'Regional Director', 357650, '2010/11/14', 9239, 'j.chang@datatables.net', 'Singapore', 51 ),
		( 28, 'Brenden', 'Wagner', 28, 'Software Engineer', 206850, '2011/06/07', 1314, 'b.wagner@datatables.net', 'San Francisco', 20 ),
		( 29, 'Fiona', 'Green', 48, 'Chief Operating Officer (COO)', 850000, '2010/03/11', 2947, 'f.green@datatables.net', 'San Francisco', 7 ),
		( 30, 'Shou', 'Itou', 20, 'Regional Marketing', 163000, '2011/08/14', 8899, 's.itou@datatables.net', 'Tokyo', 1 ),
		( 31, 'Michelle', 'House', 37, 'Integration Specialist', 95400, '2011/06/02', 2769, 'm.house@datatables.net', 'Sidney', 39 ),
		( 32, 'Suki', 'Burks', 53, 'Developer', 114500, '2009/10/22', 6832, 's.burks@datatables.net', 'London', 40 ),
		( 33, 'Prescott', 'Bartlett', 27, 'Technical Author', 145000, '2011/05/07', 3606, 'p.bartlett@datatables.net', 'London', 47 ),
		( 34, 'Gavin', 'Cortez', 22, 'Team Leader', 235500, '2008/10/26', 2860, 'g.cortez@datatables.net', 'San Francisco', 52 ),
		( 35, 'Martena', 'Mccray', 46, 'Post-Sales support', 324050, '2011/03/09', 8240, 'm.mccray@datatables.net', 'Edinburgh', 8 ),
		( 36, 'Unity', 'Butler', 47, 'Marketing Designer', 85675, '2009/12/09', 5384, 'u.butler@datatables.net', 'San Francisco', 24 ),
		( 37, 'Howard', 'Hatfield', 51, 'Office Manager', 164500, '2008/12/16', 7031, 'h.hatfield@datatables.net', 'San Francisco', 38 ),
		( 38, 'Hope', 'Fuentes', 41, 'Secretary', 109850, '2010/02/12', 6318, 'h.fuentes@datatables.net', 'San Francisco', 53 ),
		( 39, 'Vivian', 'Harrell', 62, 'Financial Controller', 452500, '2009/02/14', 9422, 'v.harrell@datatables.net', 'San Francisco', 30 ),
		( 40, 'Timothy', 'Mooney', 37, 'Office Manager', 136200, '2008/12/11', 7580, 't.mooney@datatables.net', 'London', 28 ),
		( 41, 'Jackson', 'Bradshaw', 65, 'Director', 645750, '2008/09/26', 1042, 'j.bradshaw@datatables.net', 'New York', 34 ),
		( 42, 'Olivia', 'Liang', 64, 'Support Engineer', 234500, '2011/02/03', 2120, 'o.liang@datatables.net', 'Singapore', 4 ),
		( 43, 'Bruno', 'Nash', 38, 'Software Engineer', 163500, '2011/05/03', 6222, 'b.nash@datatables.net', 'London', 3 ),
		( 44, 'Sakura', 'Yamamoto', 37, 'Support Engineer', 139575, '2009/08/19', 9383, 's.yamamoto@datatables.net', 'Tokyo', 31 ),
		( 45, 'Thor', 'Walton', 61, 'Developer', 98540, '2013/08/11', 8327, 't.walton@datatables.net', 'New York', 11 ),
		( 46, 'Finn', 'Camacho', 47, 'Support Engineer', 87500, '2009/07/07', 2927, 'f.camacho@datatables.net', 'San Francisco', 10 ),
		( 47, 'Serge', 'Baldwin', 64, 'Data Coordinator', 138575, '2012/04/09', 8352, 's.baldwin@datatables.net', 'Singapore', 44 ),
		( 48, 'Zenaida', 'Frank', 63, 'Software Engineer', 125250, '2010/01/04', 7439, 'z.frank@datatables.net', 'New York', 42 ),
		( 49, 'Zorita', 'Serrano', 56, 'Software Engineer', 115000, '2012/06/01', 4389, 'z.serrano@datatables.net', 'San Francisco', 27 ),
		( 50, 'Jennifer', 'Acosta', 43, 'Junior Javascript Developer', 75650, '2013/02/01', 3431, 'j.acosta@datatables.net', 'Edinburgh', 49 ),
		( 51, 'Cara', 'Stevens', 46, 'Sales Assistant', 145600, '2011/12/06', 3990, 'c.stevens@datatables.net', 'New York', 15 ),
		( 52, 'Hermione', 'Butler', 47, 'Regional Director', 356250, '2011/03/21', 1016, 'h.butler@datatables.net', 'London', 9 ),
		( 53, 'Lael', 'Greer', 21, 'Systems Administrator', 103500, '2009/02/27', 6733, 'l.greer@datatables.net', 'London', 25 ),
		( 54, 'Jonas', 'Alexander', 30, 'Developer', 86500, '2010/07/14', 8196, 'j.alexander@datatables.net', 'San Francisco', 33 ),
		( 55, 'Shad', 'Decker', 51, 'Regional Director', 183000, '2008/11/13', 6373, 's.decker@datatables.net', 'Edinburgh', 43 ),
		( 56, 'Michael', 'Bruce', 29, 'Javascript Developer', 183000, '2011/06/27', 5384, 'm.bruce@datatables.net', 'Singapore', 16 ),
		( 57, 'Donna', 'Snider', 27, 'Customer Support', 112000, '2011/01/25', 4226, 'd.snider@datatables.net', 'New York', 19 );
		BEGIN TRANSACTION;

CREATE TABLE users (
  id INTEGER PRIMARY KEY NOT NULL,
  username varchar(64) NOT NULL DEFAULT '',
  password varchar(128) NOT NULL DEFAULT '',
  fullname varchar(255) NOT NULL DEFAULT '',
  email varchar(255) NOT NULL DEFAULT '',
  description text NOT NULL,
  perm_templ tinyint(11) NOT NULL DEFAULT 0,
  active tinyint(1) NOT NULL DEFAULT 0,
  use_ldap tinyint(1) NOT NULL DEFAULT 0
);

INSERT INTO users VALUES (1,'admin','21232f297a57a5a743894a0e4a801fc3','Administrator','admin@example.net','Administrator with full rights.',1,1,0);

CREATE TABLE perm_items (
  id INTEGER PRIMARY KEY NOT NULL,
  name varchar(64) NOT NULL,
  descr text NOT NULL
);

INSERT INTO perm_items VALUES (41,'zone_master_add','User is allowed to add new master zones.');
INSERT INTO perm_items VALUES (42,'zone_slave_add','User is allowed to add new slave zones.');
INSERT INTO perm_items VALUES (43,'zone_content_view_own','User is allowed to see the content and meta data of zones he owns.');
INSERT INTO perm_items VALUES (44,'zone_content_edit_own','User is allowed to edit the content of zones he owns.');
INSERT INTO perm_items VALUES (45,'zone_meta_edit_own','User is allowed to edit the meta data of zones he owns.');
INSERT INTO perm_items VALUES (46,'zone_content_view_others','User is allowed to see the content and meta data of zones he does not own.');
INSERT INTO perm_items VALUES (47,'zone_content_edit_others','User is allowed to edit the content of zones he does not own.');
INSERT INTO perm_items VALUES (48,'zone_meta_edit_others','User is allowed to edit the meta data of zones he does not own.');
INSERT INTO perm_items VALUES (49,'search','User is allowed to perform searches.');
INSERT INTO perm_items VALUES (50,'supermaster_view','User is allowed to view supermasters.');
INSERT INTO perm_items VALUES (51,'supermaster_add','User is allowed to add new supermasters.');
INSERT INTO perm_items VALUES (52,'supermaster_edit','User is allowed to edit supermasters.');
INSERT INTO perm_items VALUES (53,'user_is_ueberuser','User has full access. God-like. Redeemer.');
INSERT INTO perm_items VALUES (54,'user_view_others','User is allowed to see other users and their details.');
INSERT INTO perm_items VALUES (55,'user_add_new','User is allowed to add new users.');
INSERT INTO perm_items VALUES (56,'user_edit_own','User is allowed to edit their own details.');
INSERT INTO perm_items VALUES (57,'user_edit_others','User is allowed to edit other users.');
INSERT INTO perm_items VALUES (58,'user_passwd_edit_others','User is allowed to edit the password of other users.');
INSERT INTO perm_items VALUES (59,'user_edit_templ_perm','User is allowed to change the permission template that is assigned to a user.');
INSERT INTO perm_items VALUES (60,'templ_perm_add','User is allowed to add new permission templates.');
INSERT INTO perm_items VALUES (61,'templ_perm_edit','User is allowed to edit existing permission templates.');

CREATE TABLE perm_templ (
  id INTEGER PRIMARY KEY NOT NULL,
  name varchar(128) NOT NULL,
  descr text NOT NULL
);

INSERT INTO perm_templ VALUES (1,'Administrator','Administrator template with full rights.');

CREATE TABLE perm_templ_items (
  id INTEGER PRIMARY KEY NOT NULL,
  templ_id int(11) NOT NULL,
  perm_id int(11) NOT NULL
);

INSERT INTO perm_templ_items VALUES (1,1,53);

CREATE TABLE zones (
  id INTEGER PRIMARY KEY NOT NULL,
  domain_id int(11) NOT NULL DEFAULT 0,
  owner int(11) NOT NULL DEFAULT 0,
  comment text,
  zone_templ_id INT(11) NOT NULL
);

CREATE INDEX owner ON zones (owner);

CREATE TABLE zone_templ (
  id INTEGER PRIMARY KEY NOT NULL,
  name varchar(128) NOT NULL,
  descr text NOT NULL,
  owner int(11) NOT NULL
);

CREATE TABLE zone_templ_records (
  id INTEGER PRIMARY KEY NOT NULL,
  zone_templ_id int(11) NOT NULL,
  name varchar(255) NOT NULL,
  type varchar(6) NOT NULL,
  content varchar(255) NOT NULL,
  ttl int(11) NOT NULL,
  prio int(11) NOT NULL
);

CREATE TABLE records_zone_templ (
    domain_id int(11) NOT NULL,
    record_id int(11) NOT NULL,
    zone_templ_id int(11) NOT NULL
);

CREATE TABLE migrations (
    version varchar(255) NOT NULL,
    apply_time int(11) NOT NULL
);

COMMIT;

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS ;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION ;
DROP TABLE IF EXISTS BATCH_JOB_PARAMS ;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE ;

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_SEQ ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_SEQ ;
DROP TABLE IF EXISTS BATCH_JOB_SEQ ;

DELETE FROM payment 
;
DELETE FROM rental 
;
DELETE FROM customer 
;
DELETE FROM film_category 
;
DELETE FROM film_text 
;
DELETE FROM film_actor 
;
DELETE FROM inventory 
;
DELETE FROM film 
;
DELETE FROM category 
;
DELETE FROM staff 
;
DELETE FROM store 
;
DELETE FROM actor 
;
DELETE FROM address 
;
DELETE FROM city 
;
DELETE FROM country 
;
DELETE FROM language 
;
CREATE TABLE contacts (
  contact_id integer NOT NULL PRIMARY KEY,
  user_id integer NOT NULL,
  changed datetime NOT NULL default '0000-00-00 00:00:00',
  del tinyint NOT NULL default '0',
  name varchar(128) NOT NULL default '',
  email text NOT NULL default '',
  firstname varchar(128) NOT NULL default '',
  surname varchar(128) NOT NULL default '',
  vcard text NOT NULL default '',
  words text NOT NULL default ''
);

CREATE INDEX ix_contacts_user_id ON contacts(user_id, del);


CREATE TABLE contactgroups (
  contactgroup_id integer NOT NULL PRIMARY KEY,
  user_id integer NOT NULL default '0',
  changed datetime NOT NULL default '0000-00-00 00:00:00',
  del tinyint NOT NULL default '0',
  name varchar(128) NOT NULL default ''
);

CREATE INDEX ix_contactgroups_user_id ON contactgroups(user_id, del);


CREATE TABLE contactgroupmembers (
  contactgroup_id integer NOT NULL,
  contact_id integer NOT NULL default '0',
  created datetime NOT NULL default '0000-00-00 00:00:00',
  PRIMARY KEY (contactgroup_id, contact_id)
);

CREATE INDEX ix_contactgroupmembers_contact_id ON contactgroupmembers (contact_id);

-- 
-- Table structure for table identities
-- 

CREATE TABLE identities (
  identity_id integer NOT NULL PRIMARY KEY,
  user_id integer NOT NULL default '0',
  changed datetime NOT NULL default '0000-00-00 00:00:00',
  del tinyint NOT NULL default '0',
  standard tinyint NOT NULL default '0',
  name varchar(128) NOT NULL default '',
  organization varchar(128) default '',
  email varchar(128) NOT NULL default '',
  "reply-to" varchar(128) NOT NULL default '',
  bcc varchar(128) NOT NULL default '',
  signature text NOT NULL default '',
  html_signature tinyint NOT NULL default '0'
);

CREATE INDEX ix_identities_user_id ON identities(user_id, del);
CREATE INDEX ix_identities_email ON identities(email, del);

-- 
-- Table structure for table users
-- 

CREATE TABLE users (
  user_id integer NOT NULL PRIMARY KEY,
  username varchar(128) NOT NULL default '',
  mail_host varchar(128) NOT NULL default '',
  created datetime NOT NULL default '0000-00-00 00:00:00',
  last_login datetime DEFAULT NULL,
  failed_login datetime DEFAULT NULL,
  failed_login_counter integer DEFAULT NULL,
  language varchar(5),
  preferences text NOT NULL default ''
);

CREATE UNIQUE INDEX ix_users_username ON users(username, mail_host);

-- 
-- Table structure for table session
-- 

CREATE TABLE session (
  sess_id varchar(128) NOT NULL PRIMARY KEY,
  created datetime NOT NULL default '0000-00-00 00:00:00',
  changed datetime NOT NULL default '0000-00-00 00:00:00',
  ip varchar(40) NOT NULL default '',
  vars text NOT NULL
);

CREATE INDEX ix_session_changed ON session (changed);

--
-- Table structure for table dictionary
--

CREATE TABLE dictionary (
    user_id integer DEFAULT NULL,
   "language" varchar(5) NOT NULL,
    data text NOT NULL
);

CREATE UNIQUE INDEX ix_dictionary_user_language ON dictionary (user_id, "language");

--
-- Table structure for table searches
--

CREATE TABLE searches (
  search_id integer NOT NULL PRIMARY KEY,
  user_id integer NOT NULL DEFAULT '0',
  "type" smallint NOT NULL DEFAULT '0',
  name varchar(128) NOT NULL,
  data text NOT NULL
);

CREATE UNIQUE INDEX ix_searches_user_type_name ON searches (user_id, type, name);

-- 
-- Table structure for table cache
-- 

CREATE TABLE cache (
  user_id integer NOT NULL default 0,
  cache_key varchar(128) NOT NULL default '',
  created datetime NOT NULL default '0000-00-00 00:00:00',
  expires datetime DEFAULT NULL,
  data text NOT NULL
);

CREATE INDEX ix_cache_user_cache_key ON cache(user_id, cache_key);
CREATE INDEX ix_cache_expires ON cache(expires);

-- 
-- Table structure for table cache_shared
-- 

CREATE TABLE cache_shared (
  cache_key varchar(255) NOT NULL,
  created datetime NOT NULL default '0000-00-00 00:00:00',
  expires datetime DEFAULT NULL,
  data text NOT NULL
);

CREATE INDEX ix_cache_shared_cache_key ON cache_shared(cache_key);
CREATE INDEX ix_cache_shared_expires ON cache_shared(expires);

--
-- Table structure for table cache_index
--

CREATE TABLE cache_index (
    user_id integer NOT NULL,
    mailbox varchar(255) NOT NULL,
    expires datetime DEFAULT NULL,
    valid smallint NOT NULL DEFAULT '0',
    data text NOT NULL,
    PRIMARY KEY (user_id, mailbox)
);

CREATE INDEX ix_cache_index_expires ON cache_index (expires);

--
-- Table structure for table cache_thread
--

CREATE TABLE cache_thread (
    user_id integer NOT NULL,
    mailbox varchar(255) NOT NULL,
    expires datetime DEFAULT NULL,
    data text NOT NULL,
    PRIMARY KEY (user_id, mailbox)
);

CREATE INDEX ix_cache_thread_expires ON cache_thread (expires);

--
-- Table structure for table cache_messages
--

CREATE TABLE cache_messages (
    user_id integer NOT NULL,
    mailbox varchar(255) NOT NULL,
    uid integer NOT NULL,
    expires datetime DEFAULT NULL,
    data text NOT NULL,
    flags integer NOT NULL DEFAULT '0',
    PRIMARY KEY (user_id, mailbox, uid)
);

CREATE INDEX ix_cache_messages_expires ON cache_messages (expires);

--
-- Table structure for table system
--

CREATE TABLE system (
  name varchar(64) NOT NULL PRIMARY KEY,
  value text NOT NULL
);

INSERT INTO system (name, value) VALUES ('roundcube-version', '2015111100');

DROP TABLE IF EXISTS "user";
DROP TABLE IF EXISTS "permission";
DROP TABLE IF EXISTS "path";
DROP TABLE IF EXISTS "interface";
DROP TABLE IF EXISTS "protocol";
DROP TABLE IF EXISTS "host";
DROP TABLE IF EXISTS "server";

CREATE TABLE "server" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "name"  VARCHAR(255) NOT NULL,
    "enabled" INTEGER NOT NULL DEFAULT(1)
);

CREATE TABLE "host" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "server_id" INTEGER NOT NULL,
    "name"  VARCHAR(255) NOT NULL,
    "long_name" VARCHAR(255) NOT NULL,
    "enabled" INTEGER NOT NULL DEFAULT(1)
);

CREATE TABLE "protocol" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "server_id" INTEGER NOT NULL,
    "host_id" INTEGER NOT NULL,
    "name"  VARCHAR(255) NOT NULL,
    "enabled" INTEGER NOT NULL DEFAULT(1)
);

CREATE TABLE "interface" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "server_id" INTEGER NOT NULL,
    "host_id" INTEGER NOT NULL,
    "protocol_id" INTEGER NOT NULL,
    "name"  VARCHAR(255) NOT NULL,
    "enabled" INTEGER NOT NULL DEFAULT(1),
    "hostname"  VARCHAR(255) NOT NULL,
    "port"  VARCHAR(16) NOT NULL
);

CREATE TABLE "permission" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "server_id" INTEGER,
    "host_id" INTEGER,
    "protocol_id" INTEGER,
    "user_id" INTEGER
);

CREATE TABLE "path" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "permission_id" INTEGER,
    "vpath" VARCHAR(255) NOT NULL,
    "ppath" VARCHAR(255) NOT NULL,
    "permissions" UNSIGNED BIG INT NOT NULL
);

CREATE TABLE "user" (
    "id"    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "host_id" INTEGER NOT NULL,
    "login_name"  VARCHAR(64) NOT NULL,
    "full_name"  VARCHAR(255) NOT NULL,
    "auth_type" INTEGER NOT NULL DEFAULT(0), 
    "passwd" VARCHAR(255) NOT NULL
);

CREATE UNIQUE INDEX "ix_svr_name" on server (name ASC);
CREATE UNIQUE INDEX "ix_user_login" on user (host_id, login_name);
DROP TABLE IF EXISTS identities;
CREATE TABLE identities (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  type INTEGER NOT NULL,
  data BLOB NOT NULL,
  UNIQUE (type, data)
);


DROP TABLE IF EXISTS child_configs;
CREATE TABLE child_configs (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  lifetime INTEGER NOT NULL DEFAULT '1500',
  rekeytime INTEGER NOT NULL DEFAULT '1200',
  jitter INTEGER NOT NULL DEFAULT '60',
  updown TEXT DEFAULT NULL,
  hostaccess INTEGER NOT NULL DEFAULT '0',
  mode INTEGER NOT NULL DEFAULT '2',
  start_action INTEGER NOT NULL DEFAULT '0',
  dpd_action INTEGER NOT NULL DEFAULT '0',
  close_action INTEGER NOT NULL DEFAULT '0',
  ipcomp INTEGER NOT NULL DEFAULT '0',
  reqid INTEGER NOT NULL DEFAULT '0'
);
DROP INDEX IF EXISTS child_configs_name;
CREATE INDEX child_configs_name ON child_configs (
  name
);


DROP TABLE IF EXISTS child_config_traffic_selector;
CREATE TABLE child_config_traffic_selector (
  child_cfg INTEGER NOT NULL,
  traffic_selector INTEGER NOT NULL,
  kind INTEGER NOT NULL
);
DROP INDEX IF EXISTS child_config_traffic_selector;
CREATE INDEX child_config_traffic_selector_all ON child_config_traffic_selector (
  child_cfg, traffic_selector
);

DROP TABLE IF EXISTS proposals;
CREATE TABLE proposals (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  proposal TEXT NOT NULL
);


DROP TABLE IF EXISTS child_config_proposal;
CREATE TABLE child_config_proposal (
  child_cfg INTEGER NOT NULL,
  prio INTEGER NOT NULL,
  prop INTEGER NOT NULL
);


DROP TABLE IF EXISTS ike_configs;
CREATE TABLE ike_configs (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  certreq INTEGER NOT NULL DEFAULT '1',
  force_encap INTEGER NOT NULL DEFAULT '0',
  local TEXT NOT NULL,
  remote TEXT NOT NULL
);


DROP TABLE IF EXISTS ike_config_proposal;
CREATE TABLE ike_config_proposal (
  ike_cfg INTEGER NOT NULL,
  prio INTEGER NOT NULL,
  prop INTEGER NOT NULL
);


DROP TABLE IF EXISTS peer_configs;
CREATE TABLE peer_configs (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  ike_version INTEGER NOT NULL DEFAULT '2',
  ike_cfg INTEGER NOT NULL,
  local_id TEXT NOT NULL,
  remote_id TEXT NOT NULL,
  cert_policy INTEGER NOT NULL DEFAULT '1',
  uniqueid INTEGER NOT NULL DEFAULT '0',
  auth_method INTEGER NOT NULL DEFAULT '1',
  eap_type INTEGER NOT NULL DEFAULT '0',
  eap_vendor INTEGER NOT NULL DEFAULT '0',
  keyingtries INTEGER NOT NULL DEFAULT '3',
  rekeytime INTEGER NOT NULL DEFAULT '7200',
  reauthtime INTEGER NOT NULL DEFAULT '0',
  jitter INTEGER NOT NULL DEFAULT '180',
  overtime INTEGER NOT NULL DEFAULT '300',
  mobike INTEGER NOT NULL DEFAULT '1',
  dpd_delay INTEGER NOT NULL DEFAULT '120',
  virtual TEXT DEFAULT NULL,
  pool TEXT DEFAULT NULL,
  mediation INTEGER NOT NULL DEFAULT '0',
  mediated_by INTEGER NOT NULL DEFAULT '0',
  peer_id INTEGER NOT NULL DEFAULT '0'
);
DROP INDEX IF EXISTS peer_configs_name;
CREATE INDEX peer_configs_name ON peer_configs (
  name
);


DROP TABLE IF EXISTS peer_config_child_config;
CREATE TABLE peer_config_child_config (
  peer_cfg INTEGER NOT NULL,
  child_cfg INTEGER NOT NULL,
  PRIMARY KEY (peer_cfg, child_cfg)
);


DROP TABLE IF EXISTS traffic_selectors;
CREATE TABLE traffic_selectors (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  type INTEGER NOT NULL DEFAULT '7',
  protocol INTEGER NOT NULL DEFAULT '0',
  start_addr BLOB DEFAULT NULL,
  end_addr BLOB DEFAULT NULL,
  start_port INTEGER NOT NULL DEFAULT '0',
  end_port INTEGER NOT NULL DEFAULT '65535'
);


DROP TABLE IF EXISTS certificates;
CREATE TABLE certificates (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  type INTEGER NOT NULL,
  keytype INTEGER NOT NULL,
  data BLOB NOT NULL
);


DROP TABLE IF EXISTS certificate_identity;
CREATE TABLE certificate_identity (
  certificate INTEGER NOT NULL,
  identity INTEGER NOT NULL,
  PRIMARY KEY (certificate, identity)
);


DROP TABLE IF EXISTS private_keys;
CREATE TABLE private_keys (
  id INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,
  type INTEGER NOT NULL,
  data BLOB NOT NULL
);


DROP TABLE IF EXISTS private_key_identity;
CREATE TABLE private_key_identity (
  private_key INTEGER NOT NULL,
  identity INTEGER NOT NULL,
  PRIMARY KEY (private_key, identity)
);


DROP TABLE IF EXISTS shared_secrets;
CREATE TABLE shared_secrets (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  type INTEGER NOT NULL,
  data BLOB NOT NULL
);


DROP TABLE IF EXISTS shared_secret_identity;
CREATE TABLE shared_secret_identity (
  shared_secret INTEGER NOT NULL,
  identity INTEGER NOT NULL,
  PRIMARY KEY (shared_secret, identity)
);


DROP TABLE IF EXISTS certificate_authorities;
CREATE TABLE certificate_authorities (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  certificate INTEGER NOT NULL
);


DROP TABLE IF EXISTS certificate_distribution_points;
CREATE TABLE certificate_distribution_points (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  ca INTEGER NOT NULL,
  type INTEGER NOT NULL,
  uri TEXT NOT NULL
);


DROP TABLE IF EXISTS pools;
CREATE TABLE pools (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL UNIQUE,
  start BLOB NOT NULL,
  end BLOB NOT NULL,
  timeout INTEGER NOT NULL
);

DROP TABLE IF EXISTS addresses;
CREATE TABLE addresses (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  pool INTEGER NOT NULL,
  address BLOB NOT NULL,
  identity INTEGER NOT NULL DEFAULT 0,
  acquired INTEGER NOT NULL DEFAULT 0,
  released INTEGER NOT NULL DEFAULT 1
);
DROP INDEX IF EXISTS addresses_pool;
CREATE INDEX addresses_pool ON addresses (
  pool
);
DROP INDEX IF EXISTS addresses_address;
CREATE INDEX addresses_address ON addresses (
  address
);
DROP INDEX IF EXISTS addresses_identity;
CREATE INDEX addresses_identity ON addresses (
  identity
);

DROP TABLE IF EXISTS leases;
CREATE TABLE leases (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  address INTEGER NOT NULL,
  identity INTEGER NOT NULL,
  acquired INTEGER NOT NULL,
  released INTEGER NOT NULL
);

DROP TABLE IF EXISTS attribute_pools;
CREATE TABLE attribute_pools (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL
);

DROP TABLE IF EXISTS attributes;
CREATE TABLE attributes (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  identity INTEGER NOT NULL DEFAULT 0,
  pool INTEGER NOT NULL DEFAULT 0,
  type INTEGER NOT NULL,
  value BLOB NOT NULL
);
DROP INDEX IF EXISTS attributes_identity;
CREATE INDEX attributes_identity ON attributes (
  identity
);
DROP INDEX IF EXISTS attributes_pool;
CREATE INDEX attributes_pool ON attributes (
  pool
);

DROP TABLE IF EXISTS ike_sas;
CREATE TABLE ike_sas (
  local_spi BLOB NOT NULL PRIMARY KEY,
  remote_spi BLOB NOT NULL,
  id INTEGER NOT NULL,
  initiator INTEGER NOT NULL,
  local_id_type INTEGER NOT NULL,
  local_id_data BLOB DEFAULT NULL,
  remote_id_type INTEGER NOT NULL,
  remote_id_data BLOB DEFAULT NULL,
  host_family INTEGER NOT NULL,
  local_host_data BLOB NOT NULL,
  remote_host_data BLOB NOT NULL,
  created INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS logs;
CREATE TABLE logs (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  local_spi BLOB NOT NULL,
  signal INTEGER NOT NULL,
  level INTEGER NOT NULL,
  msg TEXT NOT NULL,
  time INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP
);

ABORT;
ACTION;
ADD;
AFTER;
ALL;
ALTER;
ANALYZE;
AND;
AS;
ASC;
ATTACH;
AUTOINCREMENT;
BEFORE;
BEGIN;
BETWEEN;
BY;
CASCADE;
CASE;
CAST;
CHECK;
COLLATE;
COLUMN;
COMMIT;
CONFLICT;
CONSTRAINT;
CREATE;
CROSS;
CURRENT_DATE;
CURRENT_TIME;
CURRENT_TIMESTAMP;
DATABASE;
DEFAULT;
DEFERRABLE;
DEFERRED;
DELETE;
DESC;
DETACH;
DISTINCT;
DROP;
EACH;
ELSE;
END;
ESCAPE;
EXCEPT;
EXCLUSIVE;
EXISTS;
EXPLAIN;
FAIL;
FOR;
FOREIGN;
FROM;
FULL;
GLOB;
GROUP;
HAVING;
IF;
IGNORE;
IMMEDIATE;
IN;
INDEX;
INDEXED;
INITIALLY;
INNER;
INSERT;
INSTEAD;
INTERSECT;
INTO;
IS;
ISNULL;
JOIN;
KEY;
LEFT;
LIKE;
LIMIT;
MATCH;
NATURAL;
NO;
NOT;
NOTNULL;
NULL;
OF;
OFFSET;
ON;
OR;
ORDER;
OUTER;
PLAN;
PRAGMA;
PRIMARY;
QUERY;
RAISE;
RECURSIVE;
REFERENCES;
REGEXP;
REINDEX;
RELEASE;
RENAME;
REPLACE;
RESTRICT;
RIGHT;
ROLLBACK;
ROW;
SAVEPOINT;
SELECT;
SET;
TABLE;
TEMP;
TEMPORARY;
THEN;
TO;
TRANSACTION;
TRIGGER;
UNION;
UNIQUE;
UPDATE;
USING;
VACUUM;
VALUES;
VIEW;
VIRTUAL;
WHEN;
WHERE;
WITH;
WITHOUT;